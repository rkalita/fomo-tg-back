import{spawn as i}from"child_process";var n=class{async init(r){let{network:t,profile:e}=r,s=["aptos","init",`--network=${t??"local"}`,`--profile=${e??"default"}`];return this.runCommand(s)}async compile(r){let{packageDirectoryPath:t,namedAddresses:e}=r,s=["aptos","move","compile","--package-dir",t,"--skip-fetch-latest-git-deps"],o=this.parseNamedAddresses(e);return s.push(...this.prepareNamedAddresses(o)),this.runCommand(s)}async test(r){let{packageDirectoryPath:t,namedAddresses:e}=r,s=["aptos","move","test","--package-dir",t,"--skip-fetch-latest-git-deps"],o=this.parseNamedAddresses(e);return s.push(...this.prepareNamedAddresses(o)),this.runCommand(s)}async publish(r){let{packageDirectoryPath:t,namedAddresses:e,profile:s}=r,o=["aptos","move","publish","--package-dir",t,"--skip-fetch-latest-git-deps",`--profile=${s??"default"}`],a=this.parseNamedAddresses(e);return o.push(...this.prepareNamedAddresses(a)),this.runCommand(o)}async runCommand(r){return new Promise((t,e)=>{let s=i("npx",r);s.stdout.pipe(process.stdout),s.stderr.pipe(process.stderr),process.stdin.pipe(s.stdin),s.on("close",o=>{o===0?t(!0):e(new Error(`Child process exited with code ${o}`))})})}prepareNamedAddresses(r){let t=r.size,e=[];if(t===0)return e;e.push("--named-addresses");let s=0;return r.forEach((o,a)=>{s+=1;let d=`${a}=${o.toString()}`;s<t-1&&(d+=","),e.push(d)}),e}parseNamedAddresses(r){let t=new Map;return Object.keys(r).forEach(e=>{let s=r[e];t.set(e,s)}),t}};export{n as a};
//# sourceMappingURL=chunk-LDQ6JFEF.mjs.map